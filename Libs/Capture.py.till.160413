#!/bin/env python 
import errno
import sys
import socket
import time
import datetime
import os
import numpy
from socket import error as socket_error

# My library
from BeamCenter import *

class Capture:
	def __init__(self):
		#self.host='192.168.163.6' # for BL32XU videosrv 
		self.host='192.168.163.6' # for BL32XU videosrv  130407 modified
		self.port = 10101
		self.open_sig=0 # network connection to videoserv
		self.isPrep=0
		self.user=os.environ["USER"]
		self.videosrv="/isilon/Common/CentOS4/videosrv_jul02_2015a"

	def prep(self):
		if self.connect():
			self.isPrep = 1
			return
		else:
			self.restartVideoSrv()
			time.sleep(3.0)
			self.connect()
			self.isPrep = 1
			return

	def restartVideoSrv(self):
		com="ssh -XC -c arcfour %s %s --artray 3 &"%(self.host,self.videosrv)
		os.system(com)

	def connect(self):
		self.s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
		try:
			self.s.connect((self.host,self.port))
			self.open_sig=1
		except socket_error as serr:
			return False
		return True

	def disconnect(self):
		if self.open_sig==1:
			self.open_sig=0
			self.isPrep=0
			self.s.close()
			#command="ssh -l %s %s \"killall -9 videosrv\" &"%(self.user,self.host)
			#os.system(command)

	def setBright(self,bright=7500):
		# set brightness
		com_bright="put/video_brightness/%d"%bright
		self.s.sendall(com_bright)
		recbuf=self.s.recv(8000)
		#print recbuf

	def setCross(self):
		com1="put/video_cross/on"
		self.s.sendall(com1)
		recbuf=self.s.recv(8000)
		#print recbuf

	def unsetCross(self):
		com1="put/video_cross/off"
		self.s.sendall(com1)
		recbuf=self.s.recv(8000)
		print recbuf

	def capture(self,filename,speed=600,cross=False):
		if self.isPrep==0:
			self.prep()
		if self.open_sig==0:
			while (1):
				if self.connect()==True:
					break
				else:
					print "Retry Connection"
					time.sleep(5)
		if cross==False:
			print "Unset cross"
			self.unsetCross()
		# 140528
		if speed is not None:
			self.setShutterSpeed(speed)
			time.sleep(0.1)
		# Set brightness to 7500
		self.setBright()

		#com1="get/video_grab/%s"%filename
                #com1="get/bl_32in_st_1_video_grabnocross/%s"%filename
		#com1="get/video_grabnocross/%s"%filename
		com1="get/bl_32in_st_1_video_grabnocross/%s"%filename
		self.s.sendall(com1)
		recbuf=self.s.recv(8000)
		self.setCross()
		#print "debug::",recbuf

	def setShutterSpeed(self,speed):
		command="ssh -l %s %s \"echo %d > /sys/class/video4linux/video0/shutter_width\""%(self.user,self.host,speed)
		os.system(command)

	def setBinning(self, binning):
		if self.isPrep==0:
			self.prep()
		if self.open_sig==0:
			while (1):
				if self.connect()==True:
					break
				else:
					print "Retry Connection"
					time.sleep(5)

		com1="put/video_prompt/on"
		self.s.sendall(com1)
		recbuf=self.s.recv(8000)
		#print "debug::",recbuf
		com1="put/video_binning/%d"%binning
		self.s.sendall(com1)
		recbuf=self.s.recv(8000)
		#print "debug::",recbuf

	def getBinning(self):
		if self.isPrep==0:
			self.prep()
		if self.open_sig==0:
			while (1):
				if self.connect()==True:
					break
				else:
					print "Retry Connection"
					time.sleep(5)

		com1="get/video_binning/"
		self.s.sendall(com1)
		recbuf=self.s.recv(8000)
		print "debug::",recbuf
		sp = recbuf.split("/")
		if len(sp) == 5:
			return int(sp[-2])

        def aveCenter(self,prefix,gain,nave=5,speed=4000):
                totx=toty=0

                for i in range(0,nave):
                        filename="%s_%03d.ppm"%(prefix,i)
                        self.capture(filename,speed)
                        time.sleep(0.5)
                        pp=BeamCenter(filename)
                        #x,y=pp.find()
                        x,y=pp.findRobust()

                        totx+=x
                        toty+=y

                cenx=totx/float(nave)
                ceny=toty/float(nave)

                return cenx,ceny

if __name__=="__main__":
	cap=Capture()

	#for speed in numpy.arange(500,1000,100):
		#print "shutter=",speed
		#cap.setShutterSpeed(speed)
		#time.sleep(3)

	cappath="/isilon/BL32XU/BLsoft/PPPP/10.Zoo/Libs"
	picpath="%s/iiii.ppm"%cappath
	#ibin=cap.getBinning()
	#print cap.connect()
	cap.capture(picpath,speed=200)
	#print picpath,ibin
	#cap.setBinning(2)
	#picpath="%s/cap2.ppm"%cappath
	#cap.capture(picpath,speed=200)
	#time.sleep(5.0)
	#ibin=cap.getBinning()
	#print "Binning setting %5d"%ibin
	#print "Capturing"
	#cap.tuneShutter()
	#cap.captureBM("./test.ppm",22)
	#cap.capture("./test.ppm",52)
	#cap.setGain(22)
	#totx=0.0
	#toty=0.0
	#print cap.aveCenter(bright,"beam")
	cap.disconnect()
