import sys,os,math,cv2,socket
import datetime
import numpy as np
sys.path.append("/isilon/BL32XU/BLsoft/PPPP/10.Zoo/Libs/")
from MyException import * 
import CryImageProc 
import CoaxImage
import BSSconfig

from File import *

import matplotlib
import matplotlib.pyplot as plt

# Modified 2015/07/22
# Y translation is changed 500um -> 1000um when the loop is 
# not found by rotating 360 deg.

class FittingForFacing:
    def __init__(self,phis,areas):
        self.phis=phis # simple array (not numpy array)
        self.areas=areas
        self.isDone=False
        self.isDebug = False

    def prep(self):
        self.phi_list=np.array(self.phis)
        self.area_list=np.array(self.areas)

        # Mean value in amplitude
        self.mean=np.mean(self.area_list)

        # Scipy fitting
        import scipy.optimize
    
        # initial guess for the parameters
        parameter_initial = np.array([0.0, 0.0, self.mean]) #a, b
    
        param_opt, covariance = scipy.optimize.curve_fit(self.func, self.phi_list, self.area_list, p0=parameter_initial)
        print "phi_list = ", self.phi_list
        print "area_list = ", self.area_list
        print "parameter =", param_opt
    
        if self.isDebug == True:
        #seof.isDebug == True:    # modified by YK 190524
            phi_tmp = np.linspace(0, 360, 100)
            ny = self.func(phi_tmp,param_opt[0],param_opt[1],param_opt[2])
            plt.plot(self.phi_list, self.area_list, 'o')
            plt.plot(phi_tmp, ny, '-')
            plt.show()
    
        self.isDone=True
        return param_opt

    def func(self,phi,a,b,c):
        return a*np.cos(np.pi/90.0*(phi+b))+c

    def findFaceAngle(self):
        if self.isDone==False:
            param_opt=self.prep()

        phi_tmp = np.linspace(0, 180, 36)
        ny = self.func(phi_tmp,param_opt[0],param_opt[1],param_opt[2])

        min_value=1000000.0
        for phi,value in zip(phi_tmp,ny):
            if value < min_value:
                min_value=value
                phi_min=phi

        face_angle=phi_min+90.0
        print "findFaceAngle=%5.1f deg."%face_angle
        return face_angle

    def check(self):
        if self.isDone==False:
            self.prep()
        phi_tmp = np.linspace(0, 360, 100)
        print phi_tmp
        plt.figure()
        plt.plot(self.phi_list,self.area_list,'r-')
        plt.plot(phi_tmp, self.p1[0]*np.cos(np.pi/90.0*phi_tmp)+self.p1[1], 'o')
        plt.show()

class INOCC:
    def __init__(self, ms, root_dir, sample_name="sample"):
        self.coi=CoaxImage.CoaxImage(ms)
        self.fname="/isilon/BL32XU/BLsoft/PPPP/10.Zoo/test.ppm"
        self.isInit=False
        self.debug=True
        self.logdir="/isilon/BL32XU/BLsoft/PPPP/10.Zoo/Log/"
        self.backimg="/isilon/BL32XU/BLsoft/PPPP/10.Zoo/BackImages/back-1905171850.ppm"
        self.bssconfig_file="/isilon/blconfig/bl32xu/bss/bss.config"

        # Directory for saving the INOCC result for each data
        self.sample_name=sample_name
        self.root_dir = root_dir

        # Yamagiwa threshold
        # Longest distance threshold from Cmount position during Centering
        self.ddist_thresh=4.5 # [mm]
        # Raster image for each data directory
        self.isRasterPic = False

        # Vertical width of the OAV
        self.oav_vert_um = 800.0 # [um]

        # For facing loop
        self.phi_list = []
        self.area_list = []

    # INOCC is called from Loopmeasurement
    # Basically each loop has an instance of LoopMeasurement
    # Then, INOCC instance is also one for each loop
    def init(self):
        # Log directory is making for Today
        tds="%s"%(datetime.datetime.now().strftime("%y%m%d"))
        self.todaydir="%s/%s"%(self.logdir,tds)

        # Making today's directory
        if os.path.exists(self.todaydir):
            print "%s already exists"%self.todaydir
        else:
            os.makedirs(self.todaydir)
        # File number treatment
        self.ff=File(self.todaydir)

        # Loop directory
        loop_dirname = "%03d_%s" % (self.ff.getNewIdx3(), self.sample_name)
        self.loop_dir = "%s/%s"%(self.todaydir, loop_dirname)
        # Making loop's directory
        if os.path.exists(self.loop_dir):
            print "%s already exists"%self.loop_dir
        else:
            os.makedirs(self.loop_dir)

        #self.raster_picpath = self.todaydir
        print "Coax camera information will be acquired!"

        self.cip = CryImageProc.CryImageProc()

        self.coi.set_zoom(14.0)
        # This is for Zoom -48000, 4x4 binning image
        self.cenx,self.ceny=self.coi.get_cross_pix()
        # 170425-Yamagiwa safety
        # Configure file for reading gonio mount position
        self.bssconfig=BSSconfig.BSSconfig(self.bssconfig_file)
        # Read Cmount position from configure file
        self.mx,self.my,self.mz=self.bssconfig.getCmount()

        # USE IF REQUIRED
        # OAV height in [um]
        # self.oav_vert_um = self.cip.getImageHeight()

        # Force to remove the existing "test.ppm"
        """
        try:
            os.system("\\rm -Rf %s"%self.fname)
        except MyException,ttt:
            raise MyException("Centering:init fails to remove the previous 'test.ppm'")
        return
        """
        self.isInit=True

    def setRasterPicture(self,raster_picpath):
        self.isRasterPic = True
        self.raster_picpath = raster_picpath
        print "OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO",self.raster_picpath
        print self.raster_picpath

    def setYamagiwaSafety(self,largest_movement):
        self.ddist_thresho=largest_movement

    def setBack(self,backimg):
        print "setting back ground image to %s"%backimg
        self.backimg=backimg

    def capture(self,image_name_abs_path):
        self.coi.get_coax_image(image_name_abs_path)

    def closeCapture(self):
        self.coi.closeCapture()

    def getGXYZphi(self):
        return self.coi.getGXYZphi()

    def moveGXYZphi(self,x,y,z,phi):
        self.coi.moveGXYZphi(x,y,z,phi)

    def fitAndFace_till190514(self,phi_list=[0,45,90,135]):
        fit_log = open("fit_face.log", "w")
        area_list=[]

        for phi in phi_list:
            self.coi.rotatePhi(phi)

            # Make arrays
            self.coi.get_coax_image(self.fname)
            cip = CryImageProc.CryImageProc()
            cip.setImages(self.fname, self.backimg)

            try:
                area=cip.getArea()
                print "PHI=",phi," AREA=",area
                area_list.append(area)
                fit_log.write("%5.2f %5.2f\n"%(phi, area))

            except MyException,ttt:
                raise MyException("fitAndFace: self.cip.getArea failed")

        # Fitting
        fff=FittingForFacing(phi_list,area_list)
        face_angle=fff.findFaceAngle()
        self.coi.rotatePhi(face_angle)
        return float(face_angle)

    # 190514 coded by K.Hirata
    def fitAndFace(self, phi_area_list):
        fit_log = open("fit_face.log", "w")
        phi_list = []
        area_list = []
        # Dividing phi & area list
        for phi, area in phi_area_list:
            phi_list.append(phi)
            area_list.append(area)
            fit_log.write("%5.2f %8.1f\n"%(phi, area))
        # Fitting
        fff=FittingForFacing(phi_list,area_list)
        face_angle=fff.findFaceAngle()
        return float(face_angle)

    # roi_len: length from the top in [um]
    def capture_and_center(self, option = "top", roi_len = 300.0):
        self.capture(self.fname)
        cip = CryImageProc.CryImageProc()
        cip.setImages(self.fname, self.backimg)

        cx,cy,cz,phi=self.coi.getGXYZphi()
        if self.isInit==False:
            self.init()

        cont = cip.getContour()

        # getContour failed
        if len(cont) == 0:
            return 0.0

        top_xy = cip.find_top_x(cont)
        roi_pix_len = cip.calcPixLen(roi_len)
        roi_cont = cip.selectHoriROI(cont, top_xy, roi_pix_len)
        
        # Current goniometer position
        # Found!
        if len(cont) != 0:
            # Top centering
            if option == "top":
                xedge, yedge = top_xy
            else:
            # ROI vertical center centering
                xedge, yedge = cip.findCenteringPoint(roi_cont, roi_pix_len, top_xy)
            x,y,z=self.coi.calc_gxyz_of_pix_at(xedge,yedge,cx,cy,cz,phi)
            # Calculate vertical movement at this centering step
            dx = x-cx
            dz = z-cz
            #print "DX, DZ = ", dx,dz
            ## self.cenx,self.ceny=self.coi.get_cross_pix()
            d_vertpix = top_xy[1] - self.ceny
            print "DDDDDDDDDDD",d_vertpix

            if d_vertpix > 0:
                move_direction = 1.0
            else:
                move_direction = -1.0
                
            # movement distance [um]
            vmove = move_direction*math.sqrt((dx*dx + dz*dz)) * 1000.0 # [um]
            self.coi.moveGXYZphi(x,y,z,phi) 
            if self.debug == True:
                cip.drawContourTop(cont, (xedge, yedge), "./cccc.png")

            # is a loop ROI touched to the edge of OAV scene?
            left_flag, right_flag, lower_flag, upper_flag, n_true = cip.isTouchedToEdge(roi_cont)
            edge_flags = left_flag, right_flag, lower_flag, upper_flag, n_true

            print "N_TRUE=",n_true

            if n_true == 1 and right_flag == True:
                isArea = True
            else:
                isArea = False
            if n_true == 0: 
                isFound = False
            else:   
                isFound = True

            # Calculate area of the image
            area = cv2.contourArea(cont)
            return vmove, area, isFound, isArea, edge_flags
        else:
            return 0.0, 0.0

    def rotatePhiAndGetArea(self, phi, loop_size):
        self.coi.rotatePhi(phi)
        cip = CryImageProc.CryImageProc()
        self.coi.get_coax_image(self.fname)
        cip.setImages(self.fname, self.backimg)
        roi_cont = cip.getROIcontour(loop_size)
        area = cv2.contourArea(roi_cont)
        
        return area

    def getArea(self):
        self.capture(self.fname)
        cip = CryImageProc.CryImageProc()
        cip.setImages(self.fname, self.backimg)

        contour = cip.getContour()
        area = cv2.contourArea(contour)
        print "AREA = ",area
        return area

    # 2019/05/08 22:30 K.Hirata coded
    # 2019/05/14 01:45 K.Hirata modified
    # Small step centering has no meanings
    def findLoop(self,roi_len = 300.0):
        ok_flag = False
        self.area_list = [] # includes (angle, area) list

        for phi in [0,45,90,135]:
            self.coi.rotatePhi(phi)
            vmove, area, isFound, isArea, edge_flags = self.capture_and_center(option="roi",roi_len = roi_len)
            if isFound == False :
                print "No loop was detected. Next phi..."
                continue
            else:
                ok_flag = True
        
            print "Area (flag = %s) : %8.2f at %8.2f"%(isArea, area, phi)
            # when the loop was found
            if isArea == True:
                self.area_list.append((phi, area))

            # which direction does the loop move to if it is rotated by 10deg
            if len(self.area_list) == 1:
                phi += 10.0
                self.coi.rotatePhi(phi)
                vmove, area, isFound, isArea, edge_flags = self.capture_and_center(option="roi",roi_len = roi_len)
                print "VMOOOOOOOOOOOOOOOOVE=",vmove
                if vmove > 0.0:
                    direction = 1.0
                else:
                    direction = -1.0

        if ok_flag == False:
            print "Moving Y 2mm"
            gx,gy,gz,phi=self.coi.getGXYZphi()
            newgy=gy+self.cip.calcYdistAgainstGoniometer(2.0)
            self.coi.moveGXYZphi(gx,newgy,gz,phi)

            if self.isYamagiwaSafe(gx,gy,gz)==False:
                raise MyException("Movement was larger than threshold (Yamagiwa safety)")
            return False
        else:
            return True

    # Investigating 10 deg step centering
    # 2019/05/08 22:30 K.Hirata coded
    def investigateCentering(self):
        ok_flag = False
        ofile = open("step30deg_centering.dat","w")
        for phi in range(-720,720,30):
            self.coi.rotatePhi(phi)
            vmove, area = self.capture_and_center(option="roi",roi_len = 300)
            # when the loop was found
            gx,gy,gz,phi=self.coi.getGXYZphi()
            ofile.write("%5.2f deg %9.4f %9.4f %9.4f\n"%(phi, gx, gy, gz))

    def simpleCenter(self, phi, loop_size = 600.0, option = 'top'):
        print "##################### TOP CENTERING %5.2f deg." % phi
        print "INOCC.coreCentering captures %s"%self.fname
        self.coi.rotatePhi(phi)
        cx,cy,cz,phi=self.coi.getGXYZphi()
        self.coi.get_coax_image(self.fname)
        # This instance is for this centering process only
        cip = CryImageProc.CryImageProc()
        cip.setImages(self.fname, self.backimg)
        # This generates exception if it could not find any centering information
        xtarget, ytarget, area, hamidashi_flag = cip.getCenterInfo(loop_size = loop_size, option = option)
        print "HAMIDASHI = ",hamidashi_flag
        x,y,z=self.coi.calc_gxyz_of_pix_at(xtarget, ytarget, cx, cy, cz, phi)
        self.coi.moveGXYZphi(x, y, z, phi)

        return area, hamidashi_flag

    """
    def suribachiCentering_old(self, phi_center, loop_size = 600.0):
        print "OOOOOOOOOOOOOOOOOO  SURIBACHI STARTS center: %5.2f OOOOOOOOOOOOOO"%phi_center
        phi_range = 90.0
        phi_step = 10.0
        phi_min = phi_center - phi_range/2.0
        phi_max = phi_center + phi_range/2.0

        ok_min = False
        ok_max = False
        area_array = []
        for i in range(0,3):
            # At around phi_min
            if ok_min == False:
                for phi in np.arange(phi_min, phi_center, phi_step):
                    print "Around minimum angle"
                    try:
                        area, hamidashi_flag = self.simpleCenter(phi, option = "top")
                        # When the -45 deg centering achieves
                        if hamidashi_flag == True:
                            area, hamidashi_flag = self.simpleCenter(phi, option = "top")
                        if phi == phi_min:
                            area_array.append((phi, area))
                            ok_min = True
                        found_phi_around_min = phi
                        break
                    except:
                        print "PHI=%5.2f failed."%phi
                        continue
    
            if ok_max == False:
                # At around phi_max
                for phi in np.arange(phi_max, phi_center, -phi_step):
                    print "Around maximum angle=",phi
                    try:
                        area, hamidashi_flag = self.simpleCenter(phi, option = "top")
                        # When the +45 deg centering achieves
                        if hamidashi_flag == True:
                            area, hamidashi_flag = self.simpleCenter(phi, option = "top")
                        # When the centering fails, this code is skipped.
                        if phi == phi_max:
                            area_array.append((phi, area))
                            ok_max = True
                        found_phi_around_max = phi
                        break
                    except:
                        print "PHI=%5.2f failed."%phi
                        continue
            print "#####################################"
            print "DIFF_PHI=", (found_phi_around_max - found_phi_around_min)
            print "#####################################"

        # Finally at the phi_center
        try:
            area, hamidashi_flag = self.simpleCenter(phi_center, option = "top")
            area_array.append((phi_center, area))
        except:
            raise MyException("suribachiCentering failed")

        print "AAAAAAAAAAAREEE", area_array
        print "EEEEEEEEEEEEEEEEEE  SURIBACHI ENDS EEEEEEEEEEEEEEEEEE"
        return area, hamidashi_flag
    """

    def suribachiCentering(self, phi_center, loop_size = 600.0):
        print "OOOOOOOOOOOOOOOOOO  SURIBACHI STARTS center: %5.2f OOOOOOOOOOOOOO"%phi_center
        phi_range = 90.0
        phi_step = 10.0
        phi_min = phi_center - phi_range/2.0
        phi_max = phi_center + phi_range/2.0

        ok_min = False
        ok_max = False
        area_array = []
        for i in range(0,5):
            # At around phi_min
            if ok_min == False:
                for phi in np.arange(phi_min, phi_center, phi_step):
                    print "Around minimum angle"
                    try:
                        area, hamidashi_flag = self.simpleCenter(phi, option = "top")
                        # When the edge can be detected
                        if hamidashi_flag == True:
                            area, hamidashi_flag = self.simpleCenter(phi, option = "top")
                        if phi == phi_min:
                            area_array.append((phi, area))
                            ok_min = True
                        found_phi_around_min = phi
                        break
                    except:
                        print "PHI=%5.2f failed."%phi
                        continue

            phi_max = found_phi_around_min + 90.0
            if ok_max == False:
                # At around phi_max
                for phi in np.arange(phi_max, found_phi_around_min, -phi_step):
                    print "Around maximum angle=",phi
                    try:
                        area, hamidashi_flag = self.simpleCenter(phi, option = "top")
                        # When the +45 deg centering achieves
                        if hamidashi_flag == True:
                            area, hamidashi_flag = self.simpleCenter(phi, option = "top")
                        # When the centering fails, this code is skipped.
                        if phi == phi_max:
                            area_array.append((phi, area))
                            ok_max = True
                        found_phi_around_max = phi
                        break
                    except:
                        print "PHI=%5.2f failed."%phi
                        continue

            diff_min_max = found_phi_around_max - found_phi_around_min
            if diff_min_max != 90.0:
                ok_min = False
                ok_max = False
            #print "#####################################"
            #print "DIFF_PHI=", (found_phi_around_max - found_phi_around_min)
            #print "#####################################"

        # Finally at the phi_center
        try:
            area, hamidashi_flag = self.simpleCenter(phi_center, option = "top")
            area_array.append((phi_center, area))
        except:
            raise MyException("suribachiCentering failed")

        print "AAAAAAAAAAAREEE", area_array
        print "EEEEEEEEEEEEEEEEEE  SURIBACHI ENDS EEEEEEEEEEEEEEEEEE"
        return area, hamidashi_flag


    # Suribachi centering new code 190517
    def coreCentering(self, phi_list, loop_size=600.0):
        self.isFoundEdge=False
        isRoughCenter = False

        if self.isInit==False:
            self.init()
        phi_area_list=[]
        n_good=0
        # Loop for rough centering
        for phi in phi_list:
            self.coi.rotatePhi(phi)
            # Gonio current coordinate
            # Try centering
            if isRoughCenter == False:
                try:
                    # If this trial fails, exception will be detected
                    junk, hamidashi_flag = self.simpleCenter(phi, loop_size = loop_size, option = 'top')
                    # When the first centering succeeds, suribachi centering will start
                    area, hamidashi_flag = self.suribachiCentering(phi, loop_size = loop_size)
                    # area of ROI for facing
                    phi_area_list.append((phi,area))
                    # If all okay in suribachi centering
                    phi1 = phi + 90.0
                    area, hamidashi_flag = self.simpleCenter(phi1, loop_size = loop_size, option = 'top')
                    phi_area_list.append((phi1, area))
                    print "coreCentering. Rough centering was finished"
                    isRoughCenter = True
                    # phi + 45.0
                    phi2 = phi + 45.0
                    area = self.rotatePhiAndGetArea(phi2, loop_size)
                    phi_area_list.append((phi2, area))
                    # PHI Middle
                    phi3 = phi + 135.0
                    area = self.rotatePhiAndGetArea(phi3, loop_size)
                    phi_area_list.append((phi3, area))
                    n_good = 4
                    break
                # Case when the loop was not found in the trial section
                except MyException,ttt:
                    #raise MyException("INOCC.coreCentering failed"
                    print "Go to next phi from %5.2f deg" % phi
                    continue
            else:
                print "Rough centering was already completed. Just for PHI= %5.2f deg. centering"%phi
                area, hamidashi_flag = self.simpleCenter(phi, loop_size = loop_size, option = 'top')

        if n_good==0:
            raise MyException("coreCentering failed")

        return n_good, phi_area_list

    def isYamagiwaSafe(self,gx,gy,gz):
        # Distance from mount position
        #print gx,gy,gz
        #print self.mx,self.my,self.mz
        dista=math.sqrt(pow((gx-self.mx),2.0)+pow((gy-self.my),2.0)+pow(gz-self.mz,2.0))
        if dista > self.ddist_thresh:
            print "deltaDistance=%5.2f mm"%dista
            return False
        else:
            return True

    # Modified along with the update of CryImageProc
    def edgeCentering(self,phi_list,ntimes,challenge=False,loop_size=600.0):
        if self.isInit==False:
            self.init()
        print "################### EDGE CENTERING ######################"
        n_good=0
        for i in range(0,ntimes):
            try:
                n_good, phi_area_list = self.coreCentering(phi_list,loop_size=loop_size)
                print "NGOOD=",n_good
                # Added 160514     
                # A little bit dangerous modification
                # 190514 I cannot understand this code
                if challenge==True and n_good == len(phi_list):
                    break
            except MyException,tttt:
                print "INOCC.edgeCentering moves Y 2000um"
                gx,gy,gz,phi=self.coi.getGXYZphi()
                move_ymm = self.cip.calcYdistAgainstGoniometer(2.0)
                newgy = gy + move_ymm
                self.coi.moveGXYZphi(gx,newgy,gz,phi)
                if self.isYamagiwaSafe(gx,gy,gz)==False:
                    raise MyException("Movement was larger than threshold (Yamagiwa safety)")
        if n_good==0:
            raise MyException("edgeCentering failed")

        print "################### EDGE CENTERING ENDED ######################"
        return n_good, phi_area_list

    def facing(self,phi_list):
        if self.isInit==False:
            self.init()
        n_good=0
        min_area=9999999999.0
        for phi in phi_list:
            self.coi.rotatePhi(phi)
            self.coi.get_coax_image(self.fname)
            # Gonio current coordinate
            cx,cy,cz,phi=self.coi.getGXYZphi()
            # This background captured with speed=200 for ARTRAY
            # This background captured with speed=40 for DFK72 YK@190315
            # 4x4 binning zoom -48000pls
            try:
                grav_x,grav_y,xwidth,ywidth,area,xedge,yedge= \
                    self.cip.getCenterInfo(self.fname,debug=False)
                print "PHI AREA=",phi,area
            except MyException,ttt:
                #print ttt.args[1]
                continue
            if min_area > area:
                min_area=area
                saved_phi=phi
        phi_face=saved_phi+90.0
        self.coi.rotatePhi(phi_face)
        return phi_face

    # Largely modified on 190514 by K.Hirata
    # loop_size should have unit of "um"
    def cap4width(self,loop_size=600.0):
        if self.isInit==False:
            self.init()

        # Capture 
        self.coi.get_coax_image(self.fname)
        cip = CryImageProc.CryImageProc()
        cip.setImages(self.fname, self.backimg)

        # For small loop
        roi_cont = cip.getROIcontour(loop_size)
        #raster_pic = "%s/raster.png" % (self.root_dir)
        print "cap4width captures",self.raster_picpath
        roi_xmin, roi_xmax, roi_ymin, roi_ymax, roi_cenx, roi_ceny = cip.getRasterArea(roi_cont, self.raster_picpath)
        log_pic = "%s/raster.png" % (self.loop_dir)
        print log_pic
        roi_xmin, roi_xmax, roi_ymin, roi_ymax, roi_cenx, roi_ceny = cip.getRasterArea(roi_cont, log_pic)

        # Raster width
        xwidth = roi_xmax - roi_xmin
        ywidth = roi_ymax - roi_ymin

        return xwidth, ywidth, roi_cenx, roi_ceny

    # Largely modified on 190514 by K.Hirata
    # loop_size should have unit of 'um'
    def doAll(self, ntimes=3, skip=False, loop_size=600.0, offset_angle=0.0):
        if self.isInit==False:
            self.init()

        phi_face=0.0
        
        # Initial goniometer coordinate
        ix,iy,iz,iphi=self.coi.getGXYZphi()

        # Main loop
        if skip==False:
            # First centering
            phi_list=[0,45,90,135]
            # Loop centering for initial stages
            # ROI should be wider 
            try:
                n_good, phi_area_list = self.edgeCentering(phi_list,2,challenge=True,loop_size=loop_size)
            except MyException,ttt:
                try:
                    n_good, phi_area_list = self.edgeCentering(phi_list,2,challenge=True,loop_size=loop_size)
                except MyException,tttt:
                    raise MyException("Loop cannot be found")

            phi_face=self.fitAndFace(phi_area_list)

            # adds offset angles for plate-like crystals
            print "EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE"
            phi_face=phi_face+offset_angle
            phi_small=phi_face+90.0
            self.simpleCenter(phi_small, loop_size, option = "gravity")
            self.simpleCenter(phi_face, loop_size, option = "gravity")

        # Final centering
        cx,cy,cz,phi=self.coi.getGXYZphi()
        # Raster area definition
        xwidth,ywidth,r_cenx,r_ceny=self.cap4width(loop_size)

        gonio_info=cx,cy,cz,phi
        pix_size_um=self.coi.get_pixel_size()
        raster_width=pix_size_um*float(xwidth)
        raster_height=pix_size_um*float(ywidth)

        print "Width  = %8.1f[um]"%raster_width
        print "Height = %8.1f[um]"%raster_height
        print "Centering.doAll finished."

        return raster_width, raster_height, phi_face, gonio_info

if __name__ == "__main__":
    ms = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    ms.connect(("172.24.242.41", 10101))
    root_dir = "/isilon/BL32XU/BLsoft/PPPP/10.Zoo/Test/"
    inocc=INOCC(ms, root_dir)
    phi_face=90

    start_time=datetime.datetime.now()
    backimg="/isilon/BL32XU/BLsoft/PPPP/10.Zoo/BackImages/back-1905182237.ppm"
    backimg="/isilon/BL32XU/BLsoft/PPPP/10.Zoo//back_190518.ppm"
    inocc.setBack(backimg)
    # For each sample raster.png
    raster_picpath = "/isilon/BL32XU/BLsoft/PPPP/10.Zoo/raster.png"
    inocc.setRasterPicture(raster_picpath)

    #def doAll(self, ntimes=3, skip=False, loop_size=600.0, offset_angle=0.0):
    rwidth,rheight,phi_face,gonio_info=inocc.doAll(ntimes=2,skip=False,loop_size=400.0)
    
    """
    ok_flag = False
    while(ok_flag != True):
        ok_flag = inocc.findLoop(roi_len = 200)

    inocc.getArea()
    inocc.defineRasterArea()
    print cip.getRasterArea(roi_xy)

    #ok_flag = inocc.capture_and_center(option="top",roi_len=300.0)
    ok_flag = inocc.capture_and_center(option="ORENO",roi_len=300.0)

    #inocc.investigateCentering()
    cnt.setBack(backimg)
    rwidth,rheight,phi_face,gonio_info=cnt.doAll(ntimes=2,skip=False,loop_size="small")
    print gonio_info,rwidth,rheight
    end_time=datetime.datetime.now()
    cons_time=end_time-start_time
    print start_time,end_time,cons_time
    """

    """
    start_time=datetime.datetime.now()
    #phi_list=[0,30,60,90,120,150,180,210,240,270,300,330,360]
    phi_list=[0,45,90,135]
    #cnt.edgeCentering(phi_list,4)
    cnt.init()
    cnt.fitAndFace(phi_list=phi_list)
    end_time=datetime.datetime.now()
    cons_time=end_time-start_time
    print start_time,end_time,cons_time
    """

    #phi_list=[0,30,60,90,120]
    #phi_face=cnt.facing(phi_list)
    #phi_usui=phi_face-90.0
    #phi_precise=np.arange(phi_usui-10.0,phi_usui+15,5)
    #print phi_precise
    #phi_face=cnt.facing(phi_precise)

    #phi_list=[phi_face,phi_face+90.0]
    #n_good,grav_x,grav_y,xwidth,ywidth,area,xedge=cnt.edgeCentering(phi_list,1)
    #xwidth,ywidth,cenx,ceny=cnt.cap4width()
    #print xwidth,ywidth,cenx,ceny
    #x,y,z=cnt.coi.calc_gxyz_of_pix_at(xcen,grav_y,cx,cy,cz,phi)
    #cnt.coi.moveGXYZphi(x,y-0.25,z,phi)
    #cnt.cip.getCenterInfo(cnt.fname)

    ms.close()
